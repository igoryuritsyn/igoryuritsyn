from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from openpyxl import Workbook, load_workbook
import os
import mimetypes
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8396747361:AAFJKCy4kEXrVqnENDbpyqWVo8DtI9FksGQ"  # üî¥ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_IDS = [1014020574, 1014020574]  # üî¥ —Å–ø–∏—Å–æ–∫ Telegram user_id –∞–¥–º–∏–Ω–æ–≤
EXCEL_FILE = "bookings.xlsx"

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
CHECKIN, CHECKOUT, ROOM_TYPE, CONFIRM = range(4)

# --- –†–∞–±–æ—Ç–∞ —Å Excel ---
def save_booking(user_id, checkin, checkout, room_type):
    if os.path.exists(EXCEL_FILE):
        wb = load_workbook(EXCEL_FILE)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        ws.append(["User ID", "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", "–¢–∏–ø –Ω–æ–º–µ—Ä–∞"])

    ws.append([user_id, checkin, checkout, room_type])
    wb.save(EXCEL_FILE)

def get_user_bookings(user_id):
    if not os.path.exists(EXCEL_FILE):
        return []

    wb = load_workbook(EXCEL_FILE)
    ws = wb.active

    bookings = []
    for row_index, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
        if row[0] == user_id:
            bookings.append({
                "row_index": row_index,
                "checkin": row[1],
                "checkout": row[2],
                "room_type": row[3]
            })
    return bookings

def delete_booking(row_index):
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active
    ws.delete_rows(row_index, 1)
    wb.save(EXCEL_FILE)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç ---
def is_valid_date(date_text):
    try:
        return datetime.strptime(date_text, "%Y-%m-%d")
    except ValueError:
        return None

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—Ç–µ–ª–µ üè®\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/book ‚Äì –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä\n"
        "/mybookings ‚Äì –º–æ–∏ –±—Ä–æ–Ω–∏\n"
        "/cancelbooking ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å\n"
        "/cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        + ("\n/admin: /allbookings ‚Äì –≤—Å–µ –±—Ä–æ–Ω–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)" if update.effective_user.id in ADMIN_IDS else "")
    )

# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-09-25):")
    return CHECKIN

async def checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    checkin_date = is_valid_date(update.message.text)
    if not checkin_date:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return CHECKIN

    today = datetime.today().date()
    if checkin_date.date() < today:
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return CHECKIN

    context.user_data["checkin"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-09-28):")
    return CHECKOUT

async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    checkout_date = is_valid_date(update.message.text)
    if not checkout_date:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return CHECKOUT

    checkin_date = is_valid_date(context.user_data["checkin"])
    if checkout_date <= checkin_date:
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHECKOUT

    context.user_data["checkout"] = update.message.text
    reply_keyboard = [["–û–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–π", "–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π", "–õ—é–∫—Å"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–º–µ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return ROOM_TYPE

async def room_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["room_type"] = update.message.text
    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {context.user_data['checkin']}\n"
        f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {context.user_data['checkout']}\n"
        f"–¢–∏–ø –Ω–æ–º–µ—Ä–∞: {context.user_data['room_type']}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–¥–∞":
        save_booking(
            user_id=update.effective_user.id,
            checkin=context.user_data["checkin"],
            checkout=context.user_data["checkout"],
            room_type=context.user_data["room_type"]
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ üè®")

        # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text=(
                    f"üì¢ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name} (ID: {update.effective_user.id})\n"
                    f"üìÖ –ó–∞–µ–∑–¥: {context.user_data['checkin']}\n"
                    f"üìÖ –í—ã–µ–∑–¥: {context.user_data['checkout']}\n"
                    f"üè® –¢–∏–ø –Ω–æ–º–µ—Ä–∞: {context.user_data['room_type']}"
                )
            )
    else:
        await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –ú–æ–∏ –±—Ä–æ–Ω–∏
async def mybookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)

    if not bookings:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–µ–π ‚ùå")
        return

    text = "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for i, b in enumerate(bookings, start=1):
        text += (
            f"üìå {i}.\n"
            f"–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {b['checkin']}\n"
            f"–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {b['checkout']}\n"
            f"–¢–∏–ø –Ω–æ–º–µ—Ä–∞: {b['room_type']}\n\n"
        )
    text += "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancelbooking"
    await update.message.reply_text(text)

# –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏
async def cancelbooking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)

    if not bookings:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π ‚ùå")
        return

    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:\n\n"
    for i, b in enumerate(bookings, start=1):
        text += (
            f"{i}. –ó–∞–µ–∑–¥ {b['checkin']} ‚Äì –í—ã–µ–∑–¥ {b['checkout']} ({b['room_type']})\n"
        )

    context.user_data["cancel_list"] = bookings
    await update.message.reply_text(text)

async def handle_cancel_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "cancel_list" not in context.user_data:
        return

    try:
        choice = int(update.message.text.strip())
        bookings = context.user_data["cancel_list"]

        if 1 <= choice <= len(bookings):
            row_index = bookings[choice - 1]["row_index"]
            delete_booking(row_index)
            await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
            context.user_data.pop("cancel_list", None)
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏).")

# –í—Å–µ –±—Ä–æ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def allbookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not os.path.exists(EXCEL_FILE):
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å –±—Ä–æ–Ω—è–º–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-—Ç–∏–ø
    mime_type, _ = mimetypes.guess_type(EXCEL_FILE)
    if not mime_type:
        mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

    with open(EXCEL_FILE, "rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename="bookings.xlsx"),
            caption="üìÇ –í—Å–µ –±—Ä–æ–Ω–∏"
        )

# --- MAIN ---
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("book", book)],
        states={
            CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, checkin)],
            CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, checkout)],
            ROOM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, room_type)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mybookings", mybookings))
    app.add_handler(CommandHandler("cancelbooking", cancelbooking))
    app.add_handler(CommandHandler("allbookings", allbookings))
    app.add_handler(conv_handler)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cancel_choice))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

